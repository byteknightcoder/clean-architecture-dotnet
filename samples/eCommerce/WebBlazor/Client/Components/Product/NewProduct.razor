@using System.ComponentModel.DataAnnotations;
@inject IAppApi _appApi

<Modal Title="Create Product" Visible="@Visible" Footer="null">
  <p>@_errorMessage</p>
  <Form @ref="_form" Model="@_model" ValidateMode="@FormValidateMode.Default" ValidateOnChange="@true"
        LabelColSpan="8" WrapperColSpan="16">
    <FormItem>
      <LabelTemplate>
        <label class="ant-form-item-required" for="name">Name</label>
      </LabelTemplate>
      <ChildContent>
        <Input id="name" @bind-Value="@context.Name" placeholder="product name"/>
      </ChildContent>
    </FormItem>

    <FormItem>
      <LabelTemplate>
        <label class="ant-form-item-required" for="quantity">Quantity</label>
      </LabelTemplate>
      <ChildContent>
        <AntDesign.InputNumber id="quantity" @bind-Value="@context.Quantity" Min="1" Max="1000"/>
      </ChildContent>
    </FormItem>

    <FormItem>
      <LabelTemplate>
        <label class="ant-form-item-required" for="cost">Cost</label>
      </LabelTemplate>
      <ChildContent>
        <AntDesign.InputNumber id="cost" @bind-Value="@context.Cost" Min="1000"/>
      </ChildContent>
    </FormItem>

    <FormItem>
      <LabelTemplate>
        <label class="ant-form-item-required" for="product-code">Cost</label>
      </LabelTemplate>
      <ChildContent>
        <Input id="product-code" @bind-Value="@context.ProductCodeName" placeholder="product code name"/>
      </ChildContent>
    </FormItem>

    <FormItem WrapperColOffset="8" WrapperColSpan="16">
      <Button Type="@ButtonType.Primary" OnClick="OnSave">
        Save
      </Button>
      <Button Type="@ButtonType.Default" OnClick="OnCancel">
        Cancel
      </Button>
    </FormItem>
  </Form>
</Modal>

@code {
  [Parameter]
  public bool Visible { get; set; }

  [Parameter]
  public EventCallback<bool> OnClose { get; set; }

  private CreateProductDto _model;
  private Form<CreateProductDto> _form;
  private string _errorMessage;

  readonly JsonSerializerOptions _options = new()
  {
    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
  };

  protected override void OnParametersSet()
  {
    _model = new CreateProductDto
    {
      Name = "demo",
      Quantity = 10,
      Cost = 1000,
      ProductCodeName = "DEMO"
    };
    StateHasChanged();
  }

  private async Task OnSave()
  {
    if (_form.Validate())
    {
      var (_, isError, errorMessage) = await _appApi.CreateProduct(new CreateProductModel(_form.Model));
      if (!isError)
      {
        Visible = false;
        await OnClose.InvokeAsync(Visible);
      }
      else
      {
        _errorMessage = errorMessage;
      }
    }
  }

  private async Task OnCancel()
  {
    Visible = false;
    await OnClose.InvokeAsync(Visible);
  }
}
