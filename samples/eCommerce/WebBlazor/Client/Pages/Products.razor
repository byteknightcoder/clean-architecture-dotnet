@page "/products"
@attribute [Authorize]
@inject IAppApi _appApi

@using AntDesign.TableModels;

<PageHeader Ghost="false">
  <PageHeaderTitle>Products</PageHeaderTitle>
  <PageHeaderExtra>
    <Button Type="primary" OnClick="@Create">Create</Button>
  </PageHeaderExtra>
  <PageHeaderContent>
    <p>@_errorMessage</p>
    <Table @ref="_table" DataSource="Items" TItem="ProductDto"
           @bind-PageIndex="CurrentPage" @bind-PageSize="PageSize" Total="TotalItems"
           Loading="Loading" OnChange="HandleTableChange" RemoteDataSource>
      <Column TData="Guid"
              @bind-Field="context.Id"
              Hidden="true"/>

      <Column TData="string"
              @bind-Field="context.Name"
              SorterCompare="@((a, b) => string.CompareOrdinal(a, b))"
              SortDirections="new[] {SortDirection.Descending}"
              SorterMultiple="1"
              Filterable FilterMultiple="false"/>

      <Column TData="decimal"
              @bind-Field="context.Cost"
              Sortable SorterMultiple="1"/>

      <Column TData="int"
              @bind-Field="context.Quantity"
              Sortable SorterMultiple="1"/>
      <ActionColumn>
        <Space>
          <SpaceItem><Button OnClick="() => Edit(context.Id)">Edit</Button></SpaceItem>
          <SpaceItem><Button Danger OnClick="() => Delete(context.Id)">Delete</Button></SpaceItem>
        </Space>
      </ActionColumn>
    </Table>
  </PageHeaderContent>
</PageHeader>

<NewProduct Visible="@_openCreateProductModal" OnClose="@OnCreateProductModalClose"></NewProduct>

@code {
  private List<ProductDto> Items { get; set; } = new();
  private int TotalItems { get; set; }
  public int PageSize { get; set; } = 10;
  public int CurrentPage { get; set; } = 1;
  public bool Loading { get; set; }
  private string _errorMessage;
  private bool _openCreateProductModal;
  private ITable  _table;

  readonly JsonSerializerOptions _options = new()
  {
    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
  };

  async Task OnCreateProductModalClose(bool visible)
  {
    _openCreateProductModal = visible;
    await HandleTableChange(_table.GetQueryModel() as QueryModel<ProductDto>);
  }

  void Create()
  {
    _openCreateProductModal = !_openCreateProductModal;
  }

  void Edit(Guid id)
  {
  }

  void Delete(Guid id)
  {
  }

  async Task HandleTableChange(QueryModel<ProductDto> query)
  {
    Loading = true;
    Console.WriteLine(JsonSerializer.Serialize(query));
    var queryRequest = new QueryDto();
    foreach (var sortModel in query.SortModel)
    {
      switch (sortModel.Sort)
      {
        case "descend":
          queryRequest.Sorts.Add(sortModel.FieldName + (sortModel.Sort == "descend" ? "Desc" : ""));
          break;
        case "ascend":
          queryRequest.Sorts.Add(sortModel.FieldName);
          break;
      }
    }

    foreach (var filterModel in query.FilterModel)
    {
      var filterOperator = filterModel.Filters.FirstOrDefault();
      queryRequest.Filters.Add(new FilterDto(filterModel.FieldName, "Contains", filterOperator.Value.ToString()));
    }

    queryRequest.Page = query.PageIndex;
    queryRequest.PageSize = query.PageSize;

    try
    {
      var (listResponseModel, isError, errorMessage) = await _appApi.GetProductsAsync(JsonSerializer.Serialize(queryRequest, _options));
      if (isError)
      {
        _errorMessage = $"Error contacting API: {errorMessage}";
      }

      Items = listResponseModel.Items;
      TotalItems = (int) listResponseModel.TotalItems;
    }
    catch (ApiException ex)
    {
      _errorMessage = $"Error contacting API: {ex.Message}";
    }
    finally
    {
      Loading = false;
      StateHasChanged();
    }
  }

}
