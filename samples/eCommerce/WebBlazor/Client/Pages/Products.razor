@page "/products"
@attribute [Authorize]
@inject IAppApi _appApi

@using AntDesign.TableModels;

<Button OnClick="@Create">Create</Button>

<Table DataSource="Items" TItem="ProductDto"
       @bind-PageIndex="CurrentPage" @bind-PageSize="PageSize" Total="TotalItems"
       Loading="Loading" OnChange="HandleTableChange" RemoteDataSource>
  <Column TData="Guid"
          @bind-Field="context.Id"
          Hidden="true" />

  <Column TData="string"
          @bind-Field="context.Name"
          SorterCompare="@((a,b)=> string.CompareOrdinal(a,b))"
          SortDirections="new[] { SortDirection.Descending }"
          SorterMultiple="1"
          Filterable FilterMultiple="false" />

  <Column TData="decimal"
          @bind-Field="context.Cost"
          Sortable SorterMultiple="1" />

  <Column TData="int"
          @bind-Field="context.Quantity"
          Sortable SorterMultiple="1" />
  <ActionColumn>
    <Space>
      <SpaceItem><Button OnClick="() => Edit(context.Id)">Edit</Button></SpaceItem>
      <SpaceItem><Button Danger OnClick="() => Delete(context.Id)">Delete</Button></SpaceItem>
    </Space>
  </ActionColumn>
</Table>

<NewProduct Visible="@_openCreateProductModal" OnClose="@OnCreateProductModalClose"></NewProduct>

@code {
  private List<ProductDto> Items { get; set; } = new();
  private int TotalItems { get; set; }
  public int PageSize { get; set; } = 10;
  public int CurrentPage { get; set; } = 1;
  public bool Loading { get; set; }
  private string _error;
  private bool _openCreateProductModal;

  readonly JsonSerializerOptions _options = new()
  {
    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
  };

  void OnCreateProductModalClose(bool visible)
  {
    _openCreateProductModal = visible;
  }

  void Create()
  {
    _openCreateProductModal = !_openCreateProductModal;
  }

  void Edit(Guid id)
  {
  }

  void Delete(Guid id)
  {
  }

  async Task HandleTableChange(QueryModel<ProductDto> query)
  {
    Loading = true;
    Console.WriteLine(JsonSerializer.Serialize(query));
    var queryRequest = new QueryDto();
    foreach (var sortModel in query.SortModel)
    {
  /*if (colInfo.SearchValue is not null)
        {
          queryRequest.Filters.Add(new FilterDto(colInfo.Field, "Contains", colInfo.SearchValue));
        }*/

      switch (sortModel.Sort)
      {
        case "descend":
          queryRequest.Sorts.Add(sortModel.FieldName + (sortModel.Sort == "descend" ? "Desc" : ""));
          break;
        case "ascend":
          queryRequest.Sorts.Add(sortModel.FieldName);
          break;
      }
    }

    foreach (var filterModel in query.FilterModel)
    {
      var filterOperator = filterModel.Filters.FirstOrDefault();
      queryRequest.Filters.Add(new FilterDto(filterModel.FieldName, "Contains", filterOperator.Value.ToString()));
    }

    queryRequest.Page = query.PageIndex;
    queryRequest.PageSize = query.PageSize;

  //Console.WriteLine(JsonSerializer.Serialize(criterionRequest, _options));

    try
    {
      var (listResponseModel, isError, errorMessage) = await _appApi.GetProductsAsync(JsonSerializer.Serialize(queryRequest, _options));
      if (isError)
      {
        _error = $"Error contacting API: {errorMessage}";
      }

      Items = listResponseModel.Items;
      TotalItems = (int) listResponseModel.TotalItems;
    }
    catch (ApiException ex)
    {
      _error = $"Error contacting API: {ex.Message}";
    }
    finally
    {
      Loading = false;
    }
  }

}
